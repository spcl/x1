# Copyright (c) 2025 ETH Zurich.
#                    All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# main author: Hannes Eberhard

from enum import Enum
from os.path import dirname, realpath
from random import Random
from typing import List


class FakerType(str, Enum):
    """
    Enum class to define the different attribute types that can be generated by the Faker class.
    Each attribute type corresponds to a newline separated list of values stored in the data folder.
    """

    Animal = "animal"
    Car = "car"
    Color = "color"
    Drink = "drink"
    Food = "food"
    Job = "job"
    NameMale = "name_male"
    NameFemale = "name_female"
    Name = "name"
    Nationality = "nationality"


class Faker:
    """
    Utility class to generate placeholder data using custom lists of attributes.
    """

    def __init__(self, faker_type: FakerType, random: Random = Random()) -> None:
        """
        Initialize the Faker instance with the type of attribute to generate and a random generator.

        Args:
            faker_type (FakerType): Type of attribute to generate.
            random (Random): Random generator. Defaults to Random().
        """
        self.faker_type = faker_type
        self.random = random
        self.data = self.load()

    def load(self) -> List[str]:
        """
        Load the list of attributes corresponding to the FakerType from the data folder.
        Lines starting with '#' are ignored.

        Returns:
            List[str]: List of attributes.
        """
        parent = dirname(realpath(__file__))
        path = f"{parent}/data/{self.faker_type.value}.txt"

        with open(path, "r") as file:
            data = file.readlines()

        data = [line.strip() for line in data]
        data = [line for line in data if line and not line.startswith("#")]

        return data

    def sample(self, num: int) -> List[str]:
        """
        Sample a specified number of attributes from the list of attributes.

        Args:
            num (int): Number of attributes to sample.
        Returns:
            List[str]: List of sampled attributes.
        """
        return self.random.sample(self.data, num)
